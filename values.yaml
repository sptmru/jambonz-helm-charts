global:
  # if defined, create and/or reference db and monitoring services in the specified namespace;
  # otherwise they create and/or referenced them in whatever the .Release namespace is
  db:
    namespace: 
    createNamespace: false
  monitoring:
    namespace:
    createNamespace: false
  kong:
    enabled: false
    useHostnames: true
    tls:
      enabled: false
      clusterIssuer:
  traefik:
    enabled: false
    useHostnames: true
    tls:
      enabled: false
      clusterIssuer:
  nginx:
    tls:
      enabled: true
      clusterIssuer: letsencrypt-prod
  cassandra:
    enabled: true
  recordings:
    enabled: false
  track:
    serviceProviderCalls: "0"
    accountCalls: "0"
    appCalls: "0"
  affinity:
  podAnnotations:
    
db: 
  # if true, create the db subchart
  enabled: true
  mysql: 
    secret: Y2Q0YmExMTQ1ZDg2N2Y2ZTU3MzQ=
monitoring: 
  # if true, create the monitoring subchart
  enabled: true
  postgres: 
    secret: dWdlUFdxbTluQDZCVkBDdyUzb1ZEcFppczI1WFVeUWlhWTg=

# (required) name of cloud provider: azure, aws, digitalocean, gcp, or none 
cloud:

# set this to "1" if you are deploying on AWS and you are using IMDSv2
awsUseIMDSv2:

jwt:
  secret: Rz11JS05NyNUZmZZZg==

# basic information that applies to all jambonz Node.js app
jambonz: 
  # a short identifier for the cluster, needed if multiple jambonz clusters will share the same redis
  clusterId: 

# these values direct which nodepool the SBC sip and rtp pods will be placed in.
# these pods have to be in special nodepools that use host network binding due to the nature
# of sip signaling and the current lack of support for sip in ingress controllers.
#
#   Note: if you want to put sip and rtp into a single nodepool (e.g. to save cost on a smaller deployment)
#   then set both labels below to the same value and both tolerations below to the same value  
#   and use those values when creating your single edge-facing nodepool when you spin up the cluster.
#   (But, for production deployments, separate nodepools are recommended for sip and rtp, and this is the default setup below).
sbc: 
  sip: 
    nodeSelector: 
      label: voip-environment 
      value: sip
    toleration: sip
    podAnnotations:
    ssl:
      enabled: false
  rtp: 
    nodeSelector: 
      label: voip-environment 
      value: rtp
    toleration: rtp
    podAnnotations:
    storageClassName:
    # list of extra initContainers
    extraInitContainers:
    # list of extra containers/sidecars
    extraContainers:
    # list of extra volumes
    extraVolumes:
    statefulset:
      # enable it only if the recordings are also enabled
      enabled: false
      # match this value with the number of jambonz-rtp nodes
      replicas: 1

# information used by the Node.js apps to write statsd to a telegraf listening instance
stats: 
  enabled: "1"
  host: telegraf
  port: "8125"
  protocol: tcp 
  telegraf: "1"
  sampleRate: "1"

# configuration information for rtpengine
rtpengine: 
  image: jambonz/rtpengine:0.1.9
  imagePullPolicy: IfNotPresent
  sidecarImage: jambonz/rtpengine-sidecar:0.8.5
  sidecarImagePullPolicy: Always
  dtmfLogPort:  "22223"
  loglevel: "5"
  homerId: "11"
  # used when global.recordings.enabled is true
  recordings:
    pvc: recordings-shared-volume
    dir: /recordings
    method: pcap
    storage: 10Gi

# used by sidecar apps in sbc-sip and feature-server to connect locally to drachtio server
drachtio: 
  image: drachtio/drachtio-server:0.8.25
  imagePullPolicy: IfNotPresent
  host: "127.0.0.1"
  port: "9022"
  homerId: "10"
  secret: Y3ltcnU=

# mysql configuration used by Node.js app that need to connect
mysql: 
  image: mysql:5.7
  host: mysql 
  database: jambones
  user: jambones_user 
  # used when the rtp is in StatefulSet mode (sbc.rtp.statefulset.enabled is true)
  storage: 10Gi
  podAnnotations:

# redis configuration used by Node.js app that need to connect
redis: 
  image: redis:alpine
  host: redis 
  port: "6379"
  podAnnotations:

# jambonz-webapp configuration
webapp: 
  image: jambonz/webapp:0.8.5
  imagePullPolicy: IfNotPresent
  replicas: 1
  podAnnotations:
  
  # (required) hostname for the jambonz port ingress
  hostname: portal.jambonz.prod.sptm.space

  # set to true to disable recording in the portal
  disableRecording: false 

# 
smpp:
  image: jambonz/smpp-esme:0.8.5
  imagePullPolicy: IfNotPresent

# sbc-inbound configuration
sbcInbound: 
  image: jambonz/sbc-inbound:0.9.0
  imagePullPolicy: IfNotPresent
  drachtioPort: "4000"
  replicas: 4
  podAnnotations:

# sbc-outbound configuration
sbcOutbound: 
  image: jambonz/sbc-outbound:0.9.0
  imagePullPolicy: IfNotPresent
  drachtioPort: "4000"
  replicas: 8
  podAnnotations:

# sbc-sip-sidecar configuration
sbcSipSidecar:
  image: jambonz/sbc-sip-sidecar:0.9.0
  imagePullPolicy: IfNotPresent

# sbc-call-router configuration
sbcCallRouter: 
  image: jambonz/sbc-call-router:0.9.0
  imagePullPolicy: IfNotPresent
  httpPort: "3000"
  replicas: 8

# sbc-sip configuration
sbcSip: 
  loglevel: info 
  sofiaLoglevel: "3"

# sidecar to wait for database up
dbWaiter:
  image: d3fk/kubectl:v1.18

# if you want to block bad sip actors, get an api key from apiban.org and put it below
apiban: 
  apiKey: 66f41de7fb855e04d5c925e074837439
  redisKey: "apiban:ips"
  refreshInterval: "3600"
  foreverBlockRanges: "128.90.0.0/16,162.142.125.0/24,198.235.24.0/24,205.210.31.0/24"
  podAnnotations:

# Jambonz API server configuration
api: 
  image: sptmru/jambonz-api-server-custom:0.32
  imagePullPolicy: Always
  httpPort: "3000"
  replicas: 20
  podAnnotations:
  # (required) hostname for the jambonz port ingress
  hostname: api.jambonz.prod.sptm.space
  protocol: http 

# FreeSWITCH configuration
freeswitch: 
  image: sptmru/drachtio-freeswitch-mrf-custom:0.8
  imagePullPolicy: Always
  args:
    - freeswitch
    - --codec-answer-generous

# Feature server configuration
featureServer: 
  image: sptmru/drachtio-feature-server-custom:0.50
  imagePullPolicy: Always
  httpPort: "3000"
  drachtioConnection: "127.0.0.1:9022:cymru"
  freeswitchConnection: "127.0.0.1:8021:JambonzR0ck$"
  awsRegion: us-west-1
  replicas: 40
  otelSampleRate: 1.0
  podAnnotations:
  fsstatusapi:
    baseUrl: http://fs-status-api:8479/api/v1
    apiKey: pNubPhzdh3uW9tuoAyjb89FuRq7ZXxapvDs4uKBd2yinA8c7xvZfqn884DH9dgVJNR7UGEBQwcW
  drachtio:
    loglevel: info
    sofiaLoglevel: "3"

# Feature server status API configuration
fsstatusapi:
  image: sptmru/jambonz-fs-status-api:0.20
  imagePullPolicy: Always
  replicas: 10
  podAnnotations:
  logLevel: debug
  loki:
    enabled: true
    endpoint: http://loki-gateway.jambonz.svc.cluster.local
    jobLabel: fs-status-api
    json: true
    interval: 5
    timeout: 10000
  hostname: fs-status-api.jambonz.prod.sptm.space
  httpPort: 8479
  apiBasePrefix: /api/v1
  apiAuthToken: pNubPhzdh3uW9tuoAyjb89FuRq7ZXxapvDs4uKBd2yinA8c7xvZfqn884DH9dgVJNR7UGEBQwcW
  redis:
    instanceSet: instances
  featureServerMaxCalls: 1200
  cronjob:
    image: sptmru/jambonz-fs-status-cronjob:0.20
    imagePullPolicy: Always
    podAnnotations:
    logLevel: debug

# IVR app configuration
ivrapp:
  image: sptmru/jambonz-ivr-app:0.32
  imagePullPolicy: Always
  replicas: 20
  podAnnotations:
  logLevel: info
  sentry:
    dsn: https://c97dd5490468baa0da17b00c21e1d0e1@o1156046.ingest.us.sentry.io/4507078109560832
    tracesSampleRate: 1.0
    profilesSampleRate: 1.0
    logLevel: error
    authToken: 09b138334ba4048d7f864c383e823be5c7258b455ccac586cd259b8369f0310b
  loki:
    enabled: true
    endpoint: http://loki-gateway.jambonz.svc.cluster.local
    jobLabel: ivr-app
    json: true
    interval: 5
    timeout: 10000
  ws:
    hostname: ws.ivrapi.jambonz.prod.sptm.space
    port: 8081
    enabled: false
    ivrEndpoint: /ivr
  hostname: ivrapi.jambonz.prod.sptm.space
  httpPort: 8476
  wsPort: 8081
  apiBasePrefix: /api/v1
  apiAuthToken: agNUL59NL3prrNuLHbQfK9zuux98crULZX9dgsGioYYGAnSZQHqC7JzKmdmDjco3akLaPnDpuGp
  jambonz:
    accountSid: a012c987-a123-2ccd-bb88-d456e567f678
    applicationSid: 55123cc2-3456-4d56-88ac-2aa4f0fd93a9
    apiKey: 3d9108c8-166e-4473-bebd-8a99e94a12a6
    baseUrl: http://api.jambonz.prod.sptm.space
    callbackBaseUrl: http://ivrapi.jambonz.prod.sptm.space
    sipRealm: prod-worker4.dialytica.com
    amd:
      thresholdWordCount: 4
      noSpeechTimeout: 5000
      decisionTimeout: 40000
      toneTimeout: 40000
      greetingCompletionTimeout: 2000
  rabbitmq:
    uri: amqp://vos_go:00923bbc0373c55507b2@rmq.dialytica.com:5673
    callsQueue: calls_queue
    callStatusQueue: call_status_queue
    prefetchCount: 10
    reconnectTimeout: 5000
    user: vos_go
    password: 00923bbc0373c55507b2
    erlangCookie: wZX6t6FFF7RcthD9kCCz6qbnWqwag4
  redis:
    jsonType: calldetails
  callStatusApi:
    baseUrl: https://portal.dialytica.com/api
  dtmfGatherTimeout: 15

loki:
  commonConfig:
    replication_factor: 1
  storage:
    type: 'filesystem'
  schemaConfig:
    configs:
    - from: "2024-01-01"
      store: tsdb
      index:
        prefix: loki_index_
        period: 24h
      object_store: filesystem # we're storing on filesystem so there's no real persistence here.
      schema: v13
  table_manager:
    retention_deletes_enabled: true
    retention_period: 168h
    retention_policy: 168h
  auth_enabled: false